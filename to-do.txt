Falta: sección Muul - Divulgación - tarjeta de visita

Revisar: creación de equipo -> comprobar creación de carpeta -> comprobar administradores tengan los permisos de carpetas

Creación de eventos por los usuarios autorizados



-emails: ver registro de emails en el dashboard

-archivos subidos: en dashboard

-audio id vue

tailwindcss  -> after:content-['_↗']
Ejemplo:
<p>Higher resolution means more than just a better-quality image. With a Retina
6K display, <a class="text-blue-600 after:content-['_↗'] ..." href="https://www.
apple.com/pro-display-xdr/" target="_blank">Pro Display XDR</a> gives you
nearly 40 percent more screen real estate than a 5K display.</p>


Equipos:
-informes de equipo
-revisar permisos coordinadores (publicaciones, archivos)


Eventos:
-grupo de usuarios social pueden crear eventos


images slider
https://backpackforlaravel.com/articles/tutorials/how-to-build-an-image-slider-crud-backpack-basics


TNTSearch
https://tnt.studio/searching-for-users-with-laravel-scout-and-tntsearch


https://airports.tnt.studio/tnt-analytics







DEPLOY AUTOMATIZADO

-----


Para utilizar Git-ftp en conjunto con GitHub Actions en tu proyecto Laravel + Inertia + Backpack, puedes seguir los pasos a continuación:

1. Instalar Git-ftp: Primero, debes asegurarte de tener Git-ftp instalado en tu entorno de desarrollo local. Puedes seguir las instrucciones de instalación proporcionadas en la documentación oficial de Git-ftp para tu sistema operativo específico.

2. Configurar Git-ftp: Una vez que Git-ftp esté instalado, necesitarás configurar los parámetros de conexión FTP en tu entorno local. Desde la línea de comandos, navega hasta la raíz de tu proyecto y ejecuta el siguiente comando para inicializar Git-ftp:

git ftp init --user <FTP_USERNAME> --passwd <FTP_PASSWORD> --syncroot public

Asegúrate de reemplazar `<FTP_USERNAME>` y `<FTP_PASSWORD>` con tus credenciales de FTP y ajusta `--syncroot` según la ubicación de la carpeta pública de tu proyecto Laravel.

3. Crear un flujo de trabajo de GitHub Actions: En tu repositorio de GitHub, crea un archivo llamado .github/workflows/ftp-deploy.yml y agrega el siguiente contenido:

name: FTP Deployment

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install Dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Install Git and Git-ftp
        run: |
          sudo apt-get update
          sudo apt-get install -y git git-ftp

      - name: FTP Deploy
        run: |
          git ftp init --user ${{ secrets.FTP_USERNAME }} --passwd ${{ secrets.FTP_PASSWORD }} --syncroot public
          git ftp push -u ${{ secrets.FTP_USERNAME }} -p ${{ secrets.FTP_PASSWORD }} ftp://your-ftp-server.com/path/to/destination-folder


Asegúrate de reemplazar `your-ftp-server.com/path/to/destination-folder` con la URL y la ruta de la carpeta de destino correctas en tu servidor FTP.

4. Configurar las variables de entorno: En la configuración de tu repositorio de GitHub, ve a la sección "Secrets" y agrega las siguientes variables de entorno:

FTP_USERNAME: El nombre de usuario de FTP.
FTP_PASSWORD: La contraseña de FTP.
Asegúrate de ingresar los valores correctos para tus credenciales de FTP.

Con estos pasos, cada vez que realices un push a la rama main de tu repositorio, GitHub Actions ejecutará el flujo de trabajo configurado. Esto a su vez inicializará Git-ftp y realizará la implementación de los archivos modificados al servidor FTP especificado.

Recuerda que Git-ftp solo transferirá los archivos modificados desde la última implementación, lo que optimiza el proceso de implementación.

Espero que esto te ayude a utilizar Git-ftp con GitHub Actions en tu proyecto Laravel + Inertia + Backpack. Si tienes más preguntas, no dudes en preguntar.
